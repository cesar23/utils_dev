#!/bin/bash

# Fecha y hora actual en formato: YYYY-MM-DD_HH:MM:SS (hora local)
DATE_HOUR=$(date "+%Y-%m-%d_%H:%M:%S")
# Fecha y hora actual en Per√∫ (UTC -5)
DATE_HOUR_PE=$(date -u -d "-5 hours" "+%Y-%m-%d_%H:%M:%S") # Fecha y hora actuales en formato YYYY-MM-DD_HH:MM:SS.
CURRENT_USER=$(id -un)             # Nombre del usuario actual.
CURRENT_USER_HOME="${HOME:-$USERPROFILE}"  # Ruta del perfil del usuario actual.
CURRENT_PC_NAME=$(hostname)        # Nombre del equipo actual.
MY_INFO="${CURRENT_USER}@${CURRENT_PC_NAME}"  # Informaci√≥n combinada del usuario y del equipo.
PATH_SCRIPT=$(readlink -f "${BASH_SOURCE:-$0}")  # Ruta completa del script actual.
SCRIPT_NAME=$(basename "$PATH_SCRIPT")           # Nombre del archivo del script.
CURRENT_DIR=$(dirname "$PATH_SCRIPT")            # Ruta del directorio donde se encuentra el script.
NAME_DIR=$(basename "$CURRENT_DIR")              # Nombre del directorio actual.
TEMP_PATH_SCRIPT=$(echo "$PATH_SCRIPT" | sed 's/.sh/.tmp/g')  # Ruta para un archivo temporal basado en el nombre del script.
TEMP_PATH_SCRIPT_SYSTEM=$(echo "${TMP}/${SCRIPT_NAME}" | sed 's/.sh/.tmp/g')  # Ruta para un archivo temporal en /tmp.
ROOT_PATH=$(realpath -m "${CURRENT_DIR}/..")

# =============================================================================
# üé® SECTION: Colores para su uso
# =============================================================================
# Definici√≥n de colores que se pueden usar en la salida del terminal.

# Colores Regulares
Color_Off='\033[0m'       # Reset de color.
Black='\033[0;30m'        # Negro.
Red='\033[0;31m'          # Rojo.
Green='\033[0;32m'        # Verde.
Yellow='\033[0;33m'       # Amarillo.
Blue='\033[0;34m'         # Azul.
Purple='\033[0;35m'       # P√∫rpura.
Cyan='\033[0;36m'         # Cian.
White='\033[0;37m'        # Blanco.
Gray='\033[0;90m'         # Gris.

# Colores en Negrita
BBlack='\033[1;30m'       # Negro (negrita).
BRed='\033[1;31m'         # Rojo (negrita).
BGreen='\033[1;32m'       # Verde (negrita).
BYellow='\033[1;33m'      # Amarillo (negrita).
BBlue='\033[1;34m'        # Azul (negrita).
BPurple='\033[1;35m'      # P√∫rpura (negrita).
BCyan='\033[1;36m'        # Cian (negrita).
BWhite='\033[1;37m'       # Blanco (negrita).
BGray='\033[1;90m'        # Gris (negrita).



# ==============================================================================
# üìù Funci√≥n: msg
# ------------------------------------------------------------------------------
# ‚úÖ Descripci√≥n:
#   Imprime un mensaje con formato est√°ndar, incluyendo:
#   - Marca de tiempo en UTC-5 (Per√∫)
#   - Tipo de mensaje (INFO, WARNING, ERROR, o personalizado)
#   - Colores para terminal (si est√°n definidos previamente)
#
# üîß Par√°metros:
#   $1 - Mensaje a mostrar (texto)
#   $2 - Tipo de mensaje (INFO | WARNING | ERROR | otro) [opcional, por defecto: INFO]
#
# üí° Uso:
#   msg "Inicio del proceso"               # Por defecto: INFO
#   msg "Plugin no instalado" "WARNING"
#   msg "Error de conexi√≥n" "ERROR"
#   msg "Mensaje personalizado" "DEBUG"
#
# üé® Requiere:
#   Variables de color: BBlue, BYellow, BRed, BWhite, BGray, Color_Off
# ==============================================================================

msg() {
  local message="$1"
  local level="${2:-INFO}"
  local timestamp
  timestamp=$(date -u -d "-5 hours" "+%Y-%m-%d %H:%M:%S")

  local SHOW_DETAIL=1
  if [ -n "$SO_SYSTEM" ] && [ "$SO_SYSTEM" = "termux" ]; then
    SHOW_DETAIL=0
  fi


  case "$level" in
    INFO)
        if [ "$SHOW_DETAIL" -eq 0 ]; then
          echo -e "${BBlue}[INFO]${Color_Off} ${message}"
        else
          echo -e "${BBlue}${timestamp} ${BWhite}- [INFO]${Color_Off} ${message}"
        fi
        ;;
    WARNING)
        if [ "$SHOW_DETAIL" -eq 0 ]; then
          echo -e "${BYellow}[WARNING]${Color_Off} ${message}"
        else
          echo -e "${BYellow}${timestamp} ${BWhite}- [WARNING]${Color_Off} ${message}"
        fi
        ;;
    ERROR)
        if [ "$SHOW_DETAIL" -eq 0 ]; then
          echo -e "${BRed}[ERROR]${Color_Off} ${message}"
        else
          echo -e "${BRed}${timestamp} ${BWhite}- [ERROR]${Color_Off} ${message}"
        fi
        ;;
    SUCCESS)
        if [ "$SHOW_DETAIL" -eq 0 ]; then
          echo -e "${BGreen}[ERROR]${Color_Off} ${message}"
        else
          echo -e "${BGreen}${timestamp} ${BWhite}- [SUCCESS]${Color_Off} ${message}"
        fi
        ;;
    *)
          echo -e "${BGray}[OTHER]${Color_Off} ${message}"
        ;;
  esac
}



pause_continue() {
  # Descripci√≥n:
  #   Muestra un mensaje de pausa. Si se pasa un argumento, lo usa como descripci√≥n del evento.
  #   Si no se pasa nada, se muestra un mensaje por defecto.
  #
  # Uso:
  #   pause_continue                         # Usa mensaje por defecto
  #   pause_continue "Se instal√≥ MySQL"      # Muestra "Se instal√≥ MySQL. Presiona..."

  if [ -n "$1" ]; then
    local mensaje="üîπ $1. Presiona [ENTER] para continuar..."
  else
    local mensaje="‚úÖ Comando ejecutado. Presiona [ENTER] para continuar..."
  fi

  msg  "${Gray}"
  read -p "$mensaje"
  msg  "${Color_Off}"
}


# ----------------------------------------
# Function: detect_system
# Detects the operating system distribution.
# Returns:
#   - "termux"  -> If running in Termux
#   - "wsl"     -> If running on Windows Subsystem for Linux
#   - "ubuntu"  -> If running on Ubuntu/Debian-based distributions
#   - "redhat"  -> If running on Red Hat, Fedora, CentOS, Rocky, or AlmaLinux
#   - "gitbash" -> If running on Git Bash
#   - "unknown" -> If the system is not recognized
#
# Example usage:
#   system=$(detect_system)
#   echo "Detected system: $system"
# ----------------------------------------
detect_system() {
    if [ -f /data/data/com.termux/files/usr/bin/pkg ]; then
        echo "termux"
    elif grep -q Microsoft /proc/version; then
        echo "wsl"
    elif [ -f /etc/os-release ]; then
        # Lee el ID de /etc/os-release
        source /etc/os-release
        case $ID in
            ubuntu|debian)
                echo "ubuntu"
                ;;
            rhel|centos|fedora|rocky|almalinux)
                echo "redhat"
                ;;
            *)
                echo "unknown"
                ;;
        esac
    elif [ -n "$MSYSTEM" ]; then
        echo "gitbash"
    else
        echo "unknown"
    fi
}

# =============================================================================
# üîß SECTION: Functions Utils
# =============================================================================


# =========================================
# string_slugify
# -----------------------------------------
# Convierte una cadena en un slug amigable para URLs.
# Permite controlar el formato de may√∫sculas/min√∫sculas.
#
# Argumentos:
#   $1 (str): Cadena original.
#   $2 (str): Formato de capitalizaci√≥n (opcional):
#       - "lower": todo min√∫sculas
#       - "upper": todo may√∫sculas
#       - "capitalize": primera letra en may√∫scula
#       - "title": primera letra de cada palabra en may√∫scula
#       - "none" o vac√≠o: conserva el formato original (por defecto)
#
# Retorna:
#   str: Cadena en formato slug.
#
# Ejemplos de uso:
#   texto="¬°Hola Mundo! Este es un T√≠tulo de Prueba 2024"
#   echo "$(string_slugify "$texto")"                # hola-mundo-este-es-un-titulo-de-prueba-2024
#   echo "$(string_slugify "$texto" lower)"          # hola-mundo-este-es-un-titulo-de-prueba-2024
#   echo "$(string_slugify "$texto" upper)"          # HOLA-MUNDO-ESTE-ES-UN-TITULO-DE-PRUEBA-2024
#   echo "$(string_slugify "$texto" capitalize)"     # Hola-mundo-este-es-un-titulo-de-prueba-2024
#   echo "$(string_slugify "$texto" title)"          # Hola-Mundo-Este-Es-Un-Titulo-De-Prueba-2024
#   echo "$(string_slugify "Mi_video_de prueba final")" # mi-video-de-prueba-final
#   echo "$(string_slugify "T√≠tulo con acentos y √±")"   # titulo-con-acentos-y-n
#
#   # Usando el slug para nombrar archivos:
#   titulo="Mi Video de Prueba 2024!"
#   slug=$(string_slugify "$titulo")
#   yt-dlp -o "${slug}.%(ext)s" "URL_DEL_VIDEO"
#   # Descargar√° el video como: mi-video-de-prueba-2024.mp4
# =========================================
string_slugify() {
    local input="$1"
    local case="$2"

    # Validar par√°metros
    [[ -z "$input" ]] && echo "" && return

    # Eliminar espacios iniciales y finales
    input="$(echo "$input" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')"

    # Aplicar el formato de capitalizaci√≥n
    case "$case" in
        lower)
            input="$(echo "$input" | tr '[:upper:]' '[:lower:]')"
            ;;
        upper)
            input="$(echo "$input" | tr '[:lower:]' '[:upper:]')"
            ;;
        capitalize)
            first="$(echo "${input:0:1}" | tr '[:lower:]' '[:upper:]')"
            rest="$(echo "${input:1}" | tr '[:upper:]' '[:lower:]')"
            input="$first$rest"
            ;;
        title)
            input="$(echo "$input" | awk '{for(i=1;i<=NF;i++){ $i=toupper(substr($i,1,1)) tolower(substr($i,2)) }}1')"
            ;;
        none|"")
            ;; # conservar original
        *)
            echo "Error: par√°metro inv√°lido. Usa: lower, upper, capitalize, title o none."
            return 1
            ;;
    esac

    # Eliminar caracteres no deseados (solo letras, n√∫meros, guiones y espacios)
    input="$(echo "$input" | sed 's/[^[:alnum:] _-]//g')"

    # Reemplazar espacios o guiones bajos m√∫ltiples por un solo guion
    input="$(echo "$input" | sed -E 's/[[:space:]_]+/-/g')"

    # Eliminar guiones iniciales o finales
    input="$(echo "$input" | sed -E 's/^-+|-+$//g')"

    echo "$input"
}

extraer_url_video() {
    local url="$1"
    # Extrae solo la parte hasta el primer '&' (o toda la url si no hay '&')
    local base_url="${url%%&*}"
    echo "$base_url"
}

descargar_video() {
    local url="$1"
    solo_video=$(extraer_url_video "$url")
    # Obtener y mostrar el t√≠tulo del video
    titulo_video=$(yt-dlp --get-title "$solo_video")
    titulo_video_format=$(string_slugify "$titulo_video" title )
    yt-dlp -c -f "bestvideo+bestaudio" -o "${DOWNLOADS_PATH}/${titulo_video_format}.%(ext)s" "$solo_video"
    # find get name file
    file_name_path=$(find "${DOWNLOADS_PATH}"  -type f -name "${titulo_video_format}*" | tail -n 1)
    echo "Fichero descargado en: ${file_name_path}"
    exit 0
}

descargar_playlist() {
    local url="$1"
    # yt-dlp -c -f "bestvideo+bestaudio" --yes-playlist -o "%(title)s.%(ext)s" "$url"
    yt-dlp -c -f "bestvideo+bestaudio" --yes-playlist -o "${DOWNLOADS_PATH}/%(playlist_index)02d-%(title)s.%(ext)s" "$url"
    read -p "¬øDeseas renombrar los archivos descargados a formato slug? (s/n): " resp
    if [[ "$resp" =~ ^[sS]$ ]]; then
        carpeta="."
        for archivo in "$carpeta"/*.{mp4,mkv,webm,flv}; do
            [ -e "$archivo" ] || continue
            nombre=$(basename "$archivo")
            extension="${nombre##*.}"
            base="${nombre%.*}"
            slug=$(string_slugify "$base" title)
            nuevo="${carpeta}/${slug}.${extension}"
            if [[ "$archivo" != "$nuevo" ]]; then
                echo "Renombrando: $archivo -> $nuevo"
                mv "$archivo" "$nuevo"
            fi
        done
        echo "Renombrado completado."
    fi
    exit 0
}

descargar_audio() {
    local url="$1"
    solo_audio=$(extraer_url_video "$url")
    # Obtener y mostrar el t√≠tulo del video
    titulo_audio=$(yt-dlp --get-title "$solo_audio")
    titulo_audio_format=$(string_slugify "$titulo_audio" title )
    yt-dlp -c -f "bestaudio" --extract-audio --audio-format mp3 -o "${DOWNLOADS_PATH}/${titulo_audio_format}.%(ext)s" "$solo_audio"
    # find get name file
    file_name_path=$(find "${DOWNLOADS_PATH}"  -type f -name "${titulo_audio_format}*" | tail -n 1)
    echo "Fichero de audio descargado en: ${file_name_path}"
    exit 0
}

# =============================================================================
# üî• SECTION: Main Code
# =============================================================================
# Detectar sistema operativo


SO_SYSTEM=$(detect_system)
DOWNLOADS_PATH="${CURRENT_USER_HOME}/Downloads/youtube"


# si estamos en so de termux, cambiar la ruta de descarga
if [ -n "$SO_SYSTEM" ] && [ "$SO_SYSTEM" = "termux" ]; then
    DOWNLOADS_PATH="/storage/emulated/0/Download/youtube"
fi




mkdir -p "$DOWNLOADS_PATH"


if [ $# -ne 1 ]; then
    msg "Uso: $0 '<URL de YouTube>'" "ERROR"
    exit 1
fi

url="$1"
echo ""
echo -e "${Gray}=======================================${Color_Off}"
echo -e "${BGray}====== ${BPurple}Descarga de videos v3.2.1${BGray} ======${Color_Off}"
echo -e "${Gray}=======================================${Color_Off}"
echo -e "${Gray}== Autor: Cesar auris                  ${Color_Off}"
echo -e "${Gray}== ubicado en: /usr/local/bin/yt   ${Color_Off}"
echo -e "${Gray}=======================================${Color_Off}"
echo ""

while true; do
    echo -e "${BBlue}Selecciona una opci√≥n:${Color_Off}"
    echo -e "${BYellow}1)${Color_Off} Descargar solo el video"
    echo -e "${BYellow}2)${Color_Off} Descargar playlist completo"
    echo -e "${BYellow}3)${Color_Off} Descargar solo el audio"
    echo -e "${BYellow}4)${Color_Off} Salir"
    read -p "Opci√≥n: " opcion

    case $opcion in
        1)
            echo ""
            echo -e "${BBlue}Ruta por defecto de la descarga${Color_Off}:"
            echo -e "  ${BYellow}${DOWNLOADS_PATH}${Color_Off}"
            echo -e "${Gray}--------------------------------------${Color_Off}"
            echo -e "${BBlue}(Opcional)${Color_Off}:"
            read -p "$(echo -e "${Gray}Cambiar ruta descarga o [ENTER]:${Color_Off} ")" input_path
            if [[ -n "$input_path" ]]; then
                DOWNLOADS_PATH="$input_path"
            fi
            if [[ ! -d "$DOWNLOADS_PATH" ]]; then
                echo -e "${BYellow}La carpeta no existe. Creando: ${BGreen}$DOWNLOADS_PATH${Color_Off}"
                mkdir -p "$DOWNLOADS_PATH"
            fi
            echo -e "${BGreen}Descargando en: ${BWhite}$DOWNLOADS_PATH${Color_Off}"
            descargar_video "$url"
            ;;
        2)
            echo -e "${BBlue}Ruta por defecto de la descarga${Color_Off}:"
            echo -e "  ${BYellow}${DOWNLOADS_PATH}${Color_Off}"
            echo -e "${Gray}--------------------------------------${Color_Off}"
            echo -e "${BBlue}(Opcional)${Color_Off}:"
            read -p "$(echo -e "${Gray}Cambiar ruta descarga o [ENTER]:${Color_Off} ")" input_path
            if [[ -n "$input_path" ]]; then
                DOWNLOADS_PATH="$input_path"
            fi
            if [[ ! -d "$DOWNLOADS_PATH" ]]; then
                echo -e "${BYellow}La carpeta no existe. Creando: ${BGreen}$DOWNLOADS_PATH${Color_Off}"
                mkdir -p "$DOWNLOADS_PATH"
            fi
            echo -e "${BGreen}Descargando en: ${BWhite}$DOWNLOADS_PATH${Color_Off}"
            descargar_playlist "$url"
            ;;
        3)
            echo -e "${BBlue}Ruta por defecto de la descarga${Color_Off}:"
            echo -e "  ${BYellow}${DOWNLOADS_PATH}${Color_Off}"
            echo -e "${Gray}--------------------------------------${Color_Off}"
            echo -e "${BBlue}(Opcional)${Color_Off}:"
            read -p "$(echo -e "${Gray}Cambiar ruta descarga o [ENTER]:${Color_Off} ")" input_path
            if [[ -n "$input_path" ]]; then
                DOWNLOADS_PATH="$input_path"
            fi
            if [[ ! -d "$DOWNLOADS_PATH" ]]; then
                echo -e "${BYellow}La carpeta no existe. Creando: ${BGreen}$DOWNLOADS_PATH${Color_Off}"
                mkdir -p "$DOWNLOADS_PATH"
            fi
            echo -e "${BGreen}Descargando en: ${BWhite}$DOWNLOADS_PATH${Color_Off}"
            descargar_audio "$url"
            ;;
        4)
            echo -e "${BRed}Saliendo...${Color_Off}"
            exit 0
            ;;
        *)
            echo -e "${BRed}Opci√≥n no v√°lida.${Color_Off}"
            ;;
    esac
done